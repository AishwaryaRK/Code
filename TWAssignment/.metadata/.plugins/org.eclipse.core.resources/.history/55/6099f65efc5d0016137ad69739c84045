package com.ak.tw.inventorymanagement.inventory;

import java.util.Map;

import com.ak.tw.inventorymanagement.country.Country;

public class Store {
	private Map<Country, Inventory> inventories;
	private static final int TRANSPORTCOST = 40;
	private static final int PURCHASENOTPOSSIBLE = -1;

	public Store(Map<Country, Inventory> inventories) {
		super();
		this.inventories = inventories;
	}

	public void addInventory(Country country, Inventory inventory) {
		inventories.put(country, inventory);
	}

	public void removeInventory(Inventory inventory) {
		inventories.remove(inventory);
	}

	/**
	 * @param country
	 * @param quantity
	 * @return cost of purchase if purchase in possible in the store else returns -1
	 */
	public int purchase(Country country, int quantity) {
		Inventory inventory = getInventories().get(country);
		if (inventory.getIpodStock() >= quantity) {
			inventory.setIpodStock(inventory.getIpodStock() - quantity);
			return quantity * inventory.getPrice();
		}
		int cost = inventory.getIpodStock() * inventory.getPrice();
		quantity -= inventory.getIpodStock();
		if (transportStock(quantity, country)) {
			return cost + quantity * TRANSPORTCOST;
		}
		return PURCHASENOTPOSSIBLE;
	}

	private boolean transportStock(int quantity, Country country) {
		for (Inventory inventory : inventories.values()) {
			if (inventory.getCountry() != country && inventory.getIpodStock() >= quantity) {
				inventory.setIpodStock(inventory.getIpodStock() - quantity);
				return true;
			}
		}
		return false;
	}

	public Inventory getInventory(Country country) {
		return getInventories().get(country);
	}

	public Map<Country, Inventory> getInventories() {
		return inventories;
	}

	private void setInventories(Map<Country, Inventory> inventories) {
		this.inventories = inventories;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Store [inventories=");
		builder.append(inventories);
		builder.append("]");
		return builder.toString();
	}

}
