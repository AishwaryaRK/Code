package com.ak.gojek.parkinglotsystem.parkinglot;

import java.util.ArrayList;
import java.util.List;

import com.ak.gojek.parkinglotsystem.car.Car;

public class ParkingLotBuilder {
	private List<ParkingLot> parkingLots;
	private int strategy;

	public ParkingLotBuilder() {
		super();
		this.parkingLots = new ArrayList<ParkingLot>();
	}

	public void createParkingLot(int slotCapacity) {
		int parkingLotNumber = getParkingLots().size() + 1;
		ParkingLot parkingLot = new ParkingLot(parkingLotNumber, slotCapacity);
		parkingLots.add(parkingLot);
	}

	public void setStrategy(int strategy) {
		this.strategy = strategy;
	}

	public List<ParkingLot> getParkingLots() {
		return parkingLots;
	}

	public int getStrategy() {
		return strategy;
	}

	public void park(Car car) {
		ParkingLot parkingLot = null;
		if (getStrategy() == 1) {
			parkingLot = getMostEmptyParkingLot();
		} else if (getStrategy() == 2) {
			parkingLot = getNearestParkingLot();
		}
		if (parkingLot != null) {
			parkingLot.park(car);
		}
		if (parkingLot==null) {
			System.out.println("no space");
		}
	}

	private ParkingLot getNearestParkingLot() {
		for (ParkingLot parkingLot : parkingLots) {
			if (parkingLot.getNumberOfEmptySlots() > 0) {
				return parkingLot;
			}
		}
		return null;
	}

	private ParkingLot getMostEmptyParkingLot() {
		int numberOfEmptySlots = 0;
		ParkingLot mostEmptyParkingLot = null;
		for (ParkingLot parkingLot : parkingLots) {
			if (parkingLot.getNumberOfEmptySlots() > numberOfEmptySlots) {
				numberOfEmptySlots = parkingLot.getNumberOfEmptySlots();
				mostEmptyParkingLot = parkingLot;
			}
		}
		return mostEmptyParkingLot;
	}

}
