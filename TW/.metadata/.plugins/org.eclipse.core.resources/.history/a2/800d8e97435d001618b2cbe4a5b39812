package com.ak.game.piece;

import com.ak.game.Color;
import com.ak.game.cell.Cell;

abstract public class Piece {

	private Color color;
	private Cell currentCell;
	private boolean isAlive;

	public Piece(Color color, Cell currentCell, boolean isAlive) {
		super();
		this.color = color;
		this.currentCell = currentCell;
		this.isAlive = isAlive;
	}

	public abstract boolean move(Cell newCell);

	protected abstract boolean isValidMove(Cell newCell);

	public Color getColor() {
		return color;
	}

	private void setColor(Color color) {
		this.color = color;
	}

	public Cell getCurrentCell() {
		return currentCell;
	}

	private void setCurrentCell(Cell currentCell) {
		this.currentCell = currentCell;
	}

	public boolean isAlive() {
		return isAlive;
	}

	private void setAlive(boolean isAlive) {
		this.isAlive = isAlive;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Piece [color=");
		builder.append(color);
		builder.append(", currentCell=");
		builder.append(currentCell);
		builder.append(", isAlive=");
		builder.append(isAlive);
		builder.append("]");
		return builder.toString();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((color == null) ? 0 : color.hashCode());
		result = prime * result + ((currentCell == null) ? 0 : currentCell.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Piece other = (Piece) obj;
		if (color != other.color)
			return false;
		if (currentCell == null) {
			if (other.currentCell != null)
				return false;
		} else if (!currentCell.equals(other.currentCell))
			return false;
		return true;
	}
	
	

}
