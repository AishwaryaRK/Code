import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Coursera1 {

	public static void main(String[] args) throws IOException {
		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
		long launch_date = Long.parseLong(bufferedReader.readLine());
		long enrollment_date = Long.parseLong(bufferedReader.readLine());
		long[] ans = getUpcomingSessions(launch_date, 3, enrollment_date);
		for (int i = 0; i < ans.length; i++) {
			System.out.println(ans[i]);
		}
	}

	private static long[] getUpcomingSessions(long launch_date, int repeat_frequency, long enrollment_date) {
		int numberOfSessions = 3;
		int minRepeatFrequency = 1;
		long[] upcomingSessions = new long[numberOfSessions];
		Date launchDate = new Date(launch_date);
		int daysToIncrementForNextSession = (8 - launchDate.getDay()) % 7;
		Date nextSession = new Date(launchDate.getTime() + (daysToIncrementForNextSession * 24 * 60 * 60 * 1000));
		Date enrollmentDate = new Date(enrollment_date);
		if (repeat_frequency == 0) {
			repeat_frequency = minRepeatFrequency;
		}
		long secondsToAddForNextSession=repeat_frequency * 7 * 24 * 60 * 60 * 1000;
		if (enrollmentDate.after(nextSession)) {
			nextSession = new Date(nextSession.getTime() + secondsToAddForNextSession);
		}
		for (int i = 0; i < numberOfSessions; i++) {
			System.out.println(nextSession);
			upcomingSessions[i] = nextSession.getTime();
			nextSession = new Date(nextSession.getTime() + secondsToAddForNextSession);
		}
		return upcomingSessions;
	}
}
